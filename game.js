// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä—ã
const BOARD_SIZE = 6;
const GAME_TIME = 45;
const MATCH_SCORES = {
    3: 100,
    4: 200,
    5: 300
};

// –≠–º–æ–¥–∑–∏ —Ü–≤–µ—Ç–æ–≤
const FLOWERS = [
    'üçÅ',    // –∫–ª–µ–Ω–æ–≤—ã–π –ª–∏—Å—Ç
    'üåª',    // –ø–æ–¥—Å–æ–ª–Ω—É—Ö
    'üå∑',    // —Ç—é–ª—å–ø–∞–Ω
    'üåπ'     // —Ä–æ–∑–∞
];

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let board = [];
let score = 0;
let timeLeft = GAME_TIME;
let isPlaying = false;
let selectedCell = null;
let gameTimer = null;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const gameBoard = document.getElementById('gameBoard');
const startBtn = document.getElementById('startBtn');
const timeDisplay = document.getElementById('time');
const scoreDisplay = document.getElementById('score');
const modal = document.getElementById('gameOverModal');
const finalScoreDisplay = document.getElementById('finalScore');
const okBtn = document.getElementById('okBtn');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    board = createBoard();
    score = 0;
    timeLeft = GAME_TIME;
    isPlaying = true;
    selectedCell = null;
    
    updateDisplay();
    renderBoard();
    startTimer();
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function createBoard() {
    const newBoard = [];
    for (let i = 0; i < BOARD_SIZE; i++) {
        newBoard[i] = [];
        for (let j = 0; j < BOARD_SIZE; j++) {
            newBoard[i][j] = Math.floor(Math.random() * FLOWERS.length);
        }
    }
    return newBoard;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function renderBoard() {
    gameBoard.innerHTML = '';
    for (let i = 0; i < BOARD_SIZE; i++) {
        for (let j = 0; j < BOARD_SIZE; j++) {
            const cell = createCell(i, j);
            gameBoard.appendChild(cell);
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —è—á–µ–π–∫–∏
function createCell(row, col) {
    const cell = document.createElement('div');
    cell.className = 'cell';
    cell.textContent = FLOWERS[board[row][col]];
    cell.addEventListener('click', () => handleCellClick(row, col, cell));
    return cell;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
function handleCellClick(row, col, cell) {
    if (!isPlaying) return;
    
    if (!selectedCell) {
        selectedCell = { row, col, element: cell };
        cell.classList.add('selected');
    } else {
        if (isAdjacent(selectedCell, { row, col })) {
            swapCells(selectedCell, { row, col });
        }
        selectedCell.element.classList.remove('selected');
        selectedCell = null;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å–µ–¥—Å—Ç–≤–∞ —è—á–µ–µ–∫
function isAdjacent(cell1, cell2) {
    return (
        (Math.abs(cell1.row - cell2.row) === 1 && cell1.col === cell2.col) ||
        (Math.abs(cell1.col - cell2.col) === 1 && cell1.row === cell2.row)
    );
}

// –û–±–º–µ–Ω —è—á–µ–µ–∫
async function swapCells(cell1, cell2) {
    const temp = board[cell1.row][cell1.col];
    board[cell1.row][cell1.col] = board[cell2.row][cell2.col];
    board[cell2.row][cell2.col] = temp;
    
    const matches = findMatches();
    if (matches.length > 0) {
        await processMatches(matches);
    } else {
        // –û—Ç–º–µ–Ω—è–µ–º –æ–±–º–µ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        board[cell2.row][cell2.col] = board[cell1.row][cell1.col];
        board[cell1.row][cell1.col] = temp;
        renderBoard();
    }
}

// –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
function findMatches() {
    const matches = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let i = 0; i < BOARD_SIZE; i++) {
        let count = 1;
        let type = board[i][0];
        
        for (let j = 1; j < BOARD_SIZE; j++) {
            if (board[i][j] === type) {
                count++;
            } else {
                if (count >= 3) {
                    matches.push({
                        row: i,
                        startCol: j - count,
                        endCol: j - 1,
                        length: count,
                        type: 'horizontal'
                    });
                }
                count = 1;
                type = board[i][j];
            }
        }
        if (count >= 3) {
            matches.push({
                row: i,
                startCol: BOARD_SIZE - count,
                endCol: BOARD_SIZE - 1,
                length: count,
                type: 'horizontal'
            });
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let j = 0; j < BOARD_SIZE; j++) {
        let count = 1;
        let type = board[0][j];
        
        for (let i = 1; i < BOARD_SIZE; i++) {
            if (board[i][j] === type) {
                count++;
            } else {
                if (count >= 3) {
                    matches.push({
                        col: j,
                        startRow: i - count,
                        endRow: i - 1,
                        length: count,
                        type: 'vertical'
                    });
                }
                count = 1;
                type = board[i][j];
            }
        }
        if (count >= 3) {
            matches.push({
                col: j,
                startRow: BOARD_SIZE - count,
                endRow: BOARD_SIZE - 1,
                length: count,
                type: 'vertical'
            });
        }
    }
    
    return matches;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
async function processMatches(matches) {
    // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
    matches.forEach(match => {
        score += MATCH_SCORES[match.length] || 0;
    });
    updateDisplay();
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–≤—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    matches.forEach(match => {
        if (match.type === 'horizontal') {
            for (let j = match.startCol; j <= match.endCol; j++) {
                const cell = gameBoard.children[match.row * BOARD_SIZE + j];
                cell.classList.add('match');
                board[match.row][j] = null;
            }
        } else {
            for (let i = match.startRow; i <= match.endRow; i++) {
                const cell = gameBoard.children[i * BOARD_SIZE + match.col];
                cell.classList.add('match');
                board[i][match.col] = null;
            }
        }
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // –ü–∞–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await dropElements();
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
    fillEmptyCells();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    const newMatches = findMatches();
    if (newMatches.length > 0) {
        await processMatches(newMatches);
    }
    
    renderBoard();
}

// –ü–∞–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
async function dropElements() {
    let moved = false;
    
    for (let j = 0; j < BOARD_SIZE; j++) {
        let emptySpaces = 0;
        
        for (let i = BOARD_SIZE - 1; i >= 0; i--) {
            if (board[i][j] === null) {
                emptySpaces++;
            } else if (emptySpaces > 0) {
                board[i + emptySpaces][j] = board[i][j];
                board[i][j] = null;
                moved = true;
            }
        }
    }
    
    if (moved) {
        renderBoard();
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 200));
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
function fillEmptyCells() {
    for (let i = 0; i < BOARD_SIZE; i++) {
        for (let j = 0; j < BOARD_SIZE; j++) {
            if (board[i][j] === null) {
                board[i][j] = Math.floor(Math.random() * FLOWERS.length);
            }
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateDisplay() {
    scoreDisplay.textContent = score;
    timeDisplay.textContent = timeLeft;
}

// –¢–∞–π–º–µ—Ä –∏–≥—Ä—ã
function startTimer() {
    if (gameTimer) clearInterval(gameTimer);
    
    gameTimer = setInterval(() => {
        timeLeft--;
        updateDisplay();
        
        if (timeLeft <= 0) {
            endGame();
        }
    }, 1000);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
function endGame() {
    isPlaying = false;
    clearInterval(gameTimer);
    finalScoreDisplay.textContent = score;
    modal.classList.add('show');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
startBtn.addEventListener('click', initGame);
okBtn.addEventListener('click', () => {
    modal.classList.remove('show');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
renderBoard();
